<?xml version="1.0" encoding="UTF-8" ?>
<class name="OS" inherits="Object" version="4.0">
	<brief_description>
		Operating System functions.
	</brief_description>
	<description>
		Operating System functions. OS wraps the most common functionality to communicate with the host operating system, such as the clipboard, video driver, date and time, timers, environment variables, execution of binaries, command line, etc.
	</description>
	<tutorials>
		<link title="OS Test Demo">https://godotengine.org/asset-library/asset/677</link>
	</tutorials>
	<methods>
		<method name="can_use_threads" qualifiers="const">
			<return type="bool">
			</return>
			<description>
				Returns [code]true[/code] if the current host platform is using multiple threads.
			</description>
		</method>
		<method name="close_midi_inputs">
			<return type="void">
			</return>
			<description>
				Shuts down system MIDI driver.
				[b]Note:[/b] This method is implemented on Linux, macOS and Windows.
			</description>
		</method>
		<method name="create_process">
			<return type="int">
			</return>
			<argument index="0" name="path" type="String">
			</argument>
			<argument index="1" name="arguments" type="PackedStringArray">
			</argument>
			<description>
				Creates a new process that runs independently of Godot. It will not terminate if Godot terminates. The file specified in [code]path[/code] must exist and be executable. Platform path resolution will be used. The [code]arguments[/code] are used in the given order and separated by a space.
				If the process creation succeeds, the method will return the new process ID, which you can use to monitor the process (and potentially terminate it with [method kill]). If the process creation fails, the method will return [code]-1[/code].
				For example, running another instance of the project:
				[codeblocks]
				[gdscript]
				var pid = OS.create_process(OS.get_executable_path(), [])
				[/gdscript]
				[csharp]
				var pid = OS.CreateProcess(OS.GetExecutablePath(), new string[] {});
				[/csharp]
				[/codeblocks]
				See [method execute] if you wish to run an external command and retrieve the results.
				[b]Note:[/b] This method is implemented on Android, iOS, Linux, macOS and Windows.
			</description>
		</method>
		<method name="delay_msec" qualifiers="const">
			<return type="void">
			</return>
			<argument index="0" name="msec" type="int">
			</argument>
			<description>
				Delay execution of the current thread by [code]msec[/code] milliseconds. [code]usec[/code] must be greater than or equal to [code]0[/code]. Otherwise, [method delay_msec] will do nothing and will print an error message.
			</description>
		</method>
		<method name="delay_usec" qualifiers="const">
			<return type="void">
			</return>
			<argument index="0" name="usec" type="int">
			</argument>
			<description>
				Delay execution of the current thread by [code]usec[/code] microseconds. [code]usec[/code] must be greater than or equal to [code]0[/code]. Otherwise, [method delay_usec] will do nothing and will print an error message.
			</description>
		</method>
		<method name="dump_memory_to_file">
			<return type="void">
			</return>
			<argument index="0" name="file" type="String">
			</argument>
			<description>
				Dumps the memory allocation ringlist to a file (only works in debug).
				Entry format per line: "Address - Size - Description".
			</description>
		</method>
		<method name="dump_resources_to_file">
			<return type="void">
			</return>
			<argument index="0" name="file" type="String">
			</argument>
			<description>
				Dumps all used resources to file (only works in debug).
				Entry format per line: "Resource Type : Resource Location".
				At the end of the file is a statistic of all used Resource Types.
			</description>
		</method>
		<method name="execute">
			<return type="int">
			</return>
			<argument index="0" name="path" type="String">
			</argument>
			<argument index="1" name="arguments" type="PackedStringArray">
			</argument>
			<argument index="2" name="output" type="Array" default="[  ]">
			</argument>
			<argument index="3" name="read_stderr" type="bool" default="false">
			</argument>
			<description>
				Executes a command. The file specified in [code]path[/code] must exist and be executable. Platform path resolution will be used. The [code]arguments[/code] are used in the given order and separated by a space. If an [code]output[/code] [Array] is provided, the complete shell output of the process will be appended as a single [String] element in [code]output[/code]. If [code]read_stderr[/code] is [code]true[/code], the output to the standard error stream will be included too.
				If the command is successfully executed, the method will return the exit code of the command, or [code]-1[/code] if it fails.
				[b]Note:[/b] The Godot thread will pause its execution until the executed command terminates. Use [Thread] to create a separate thread that will not pause the Godot thread, or use [method create_process] to create a completely independent process.
				For example, to retrieve a list of the working directory's contents:
				[codeblocks]
				[gdscript]
				var output = []
				var exit_code = OS.execute("ls", ["-l", "/tmp"], output)
				[/gdscript]
				[csharp]
				var output = new Godot.Collections.Array();
				int exitCode = OS.Execute("ls", new string[] {"-l", "/tmp"}, output);
				[/csharp]
				[/codeblocks]
				To execute a composite command, a platform-specific shell can be invoked. For example:
				[codeblocks]
				[gdscript]
				var output = []
				OS.execute("CMD.exe", ["/C", "cd %TEMP% &amp;&amp; dir"], output)
				[/gdscript]
				[csharp]
				var output = new Godot.Collections.Array();
				OS.Execute("CMD.exe", new string[] {"/C", "cd %TEMP% &amp;&amp; dir"}, output);
				[/csharp]
				[/codeblocks]
				[b]Note:[/b] This method is implemented on Android, iOS, Linux, macOS and Windows.
			</description>
		</method>
		<method name="find_keycode_from_string" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="string" type="String">
			</argument>
			<description>
				Returns the keycode of the given string (e.g. "Escape").
			</description>
		</method>
		<method name="get_cmdline_args">
<<<<<<< HEAD
			<return type="PoolStringArray">
=======
			<return type="PackedStringArray">
>>>>>>> 5d9cab3aeb3c62df6b7b44e6e68c0ebbb67f7a45
			</return>
			<description>
				Returns the command-line arguments passed to the engine.
				Command-line arguments can be written in any form, including both [code]--key value[/code] and [code]--key=value[/code] forms so they can be properly parsed, as long as custom command-line arguments do not conflict with engine arguments.
				You can also incorporate environment variables using the [method get_environment] method.
<<<<<<< HEAD
				You can set [code]editor/main_run_args[/code] in the Project Settings to define command-line arguments to be passed by the editor when running the project.
				Here's a minimal example on how to parse command-line arguments into a dictionary using the [code]--key=value[/code] form for arguments:
				[codeblock]
=======
				You can set [member ProjectSettings.editor/run/main_run_args] to define command-line arguments to be passed by the editor when running the project.
				Here's a minimal example on how to parse command-line arguments into a dictionary using the [code]--key=value[/code] form for arguments:
				[codeblocks]
				[gdscript]
>>>>>>> 5d9cab3aeb3c62df6b7b44e6e68c0ebbb67f7a45
				var arguments = {}
				for argument in OS.get_cmdline_args():
				    if argument.find("=") &gt; -1:
				        var key_value = argument.split("=")
				        arguments[key_value[0].lstrip("--")] = key_value[1]
<<<<<<< HEAD
				[/codeblock]
=======
				[/gdscript]
				[csharp]
				var arguments = new Godot.Collections.Dictionary();
				foreach (var argument in OS.GetCmdlineArgs())
				{
				    if (argument.Find("=") &gt; -1)
				    {
				        string[] keyValue = argument.Split("=");
				        arguments[keyValue[0].LStrip("--")] = keyValue[1];
				    }
				}
				[/csharp]
				[/codeblocks]
>>>>>>> 5d9cab3aeb3c62df6b7b44e6e68c0ebbb67f7a45
			</description>
		</method>
		<method name="get_connected_midi_inputs">
			<return type="PackedStringArray">
			</return>
			<description>
				Returns an array of MIDI device names.
				The returned array will be empty if the system MIDI driver has not previously been initialised with [method open_midi_inputs].
				[b]Note:[/b] This method is implemented on Linux, macOS and Windows.
			</description>
		</method>
		<method name="get_date" qualifiers="const">
			<return type="Dictionary">
			</return>
			<argument index="0" name="utc" type="bool" default="false">
			</argument>
			<description>
				Returns current date as a dictionary of keys: [code]year[/code], [code]month[/code], [code]day[/code], [code]weekday[/code], [code]dst[/code] (Daylight Savings Time).
			</description>
		</method>
		<method name="get_datetime" qualifiers="const">
			<return type="Dictionary">
			</return>
			<argument index="0" name="utc" type="bool" default="false">
			</argument>
			<description>
				Returns current datetime as a dictionary of keys: [code]year[/code], [code]month[/code], [code]day[/code], [code]weekday[/code], [code]dst[/code] (Daylight Savings Time), [code]hour[/code], [code]minute[/code], [code]second[/code].
			</description>
		</method>
		<method name="get_datetime_from_unix_time" qualifiers="const">
			<return type="Dictionary">
			</return>
			<argument index="0" name="unix_time_val" type="int">
			</argument>
			<description>
				Gets a dictionary of time values corresponding to the given UNIX epoch time (in seconds).
				The returned Dictionary's values will be the same as [method get_datetime], with the exception of Daylight Savings Time as it cannot be determined from the epoch.
			</description>
		</method>
		<method name="get_environment" qualifiers="const">
			<return type="String">
			</return>
			<argument index="0" name="variable" type="String">
			</argument>
			<description>
				Returns the value of an environment variable. Returns an empty string if the environment variable doesn't exist.
				[b]Note:[/b] Double-check the casing of [code]variable[/code]. Environment variable names are case-sensitive on all platforms except Windows.
			</description>
		</method>
		<method name="get_executable_path" qualifiers="const">
			<return type="String">
			</return>
			<description>
				Returns the path to the current engine executable.
			</description>
		</method>
		<method name="get_granted_permissions" qualifiers="const">
			<return type="PackedStringArray">
			</return>
			<description>
				With this function you can get the list of dangerous permissions that have been granted to the Android application.
				[b]Note:[/b] This method is implemented on Android.
			</description>
		</method>
		<method name="get_keycode_string" qualifiers="const">
			<return type="String">
			</return>
			<argument index="0" name="code" type="int">
			</argument>
			<description>
				Returns the given keycode as a string (e.g. Return values: [code]"Escape"[/code], [code]"Shift+Escape"[/code]).
				See also [member InputEventKey.keycode] and [method InputEventKey.get_keycode_with_modifiers].
			</description>
		</method>
		<method name="get_locale" qualifiers="const">
			<return type="String">
			</return>
			<description>
				Returns the host OS locale as a string of the form [code]language_Script_COUNTRY_VARIANT@extra[/code].
				[code]language[/code] - 2 or 3-letter [url=https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes]language code[/url], in lower case.
				[code]Script[/code] - optional, 4-letter [url=https://en.wikipedia.org/wiki/ISO_15924]script code[/url], in title case.
				[code]COUNTRY[/code] - optional, 2 or 3-letter [url=https://en.wikipedia.org/wiki/ISO_3166-1]country code[/url], in upper case.
				[code]VARIANT[/code] - optional, language variant, region and sort order. Variant can have any number of underscored key words.
				[code]extra[/code] - optional, semicolon separated list of additional key words. Currency, calendar, sort order and numbering system information.
			</description>
		</method>
		<method name="get_model_name" qualifiers="const">
			<return type="String">
			</return>
			<description>
				Returns the model name of the current device.
				[b]Note:[/b] This method is implemented on Android and iOS. Returns [code]"GenericDevice"[/code] on unsupported platforms.
			</description>
		</method>
		<method name="get_name" qualifiers="const">
			<return type="String">
			</return>
			<description>
				Returns the name of the host OS. Possible values are: [code]"Android"[/code], [code]"iOS"[/code], [code]"HTML5"[/code], [code]"OSX"[/code], [code]"Server"[/code], [code]"Windows"[/code], [code]"UWP"[/code], [code]"X11"[/code].
<<<<<<< HEAD
			</description>
		</method>
		<method name="get_native_handle">
			<return type="int">
			</return>
			<argument index="0" name="handle_type" type="int" enum="OS.HandleType">
			</argument>
			<description>
				Returns internal structure pointers for use in GDNative plugins.
				[b]Note:[/b] This method is implemented on Linux and Windows (other OSs will soon be supported).
			</description>
		</method>
		<method name="get_power_percent_left">
			<return type="int">
			</return>
			<description>
				Returns the amount of battery left in the device as a percentage. Returns [code]-1[/code] if power state is unknown.
				[b]Note:[/b] This method is implemented on Linux, macOS and Windows.
			</description>
		</method>
		<method name="get_power_seconds_left">
			<return type="int">
			</return>
			<description>
				Returns an estimate of the time left in seconds before the device runs out of battery. Returns [code]-1[/code] if power state is unknown.
				[b]Note:[/b] This method is implemented on Linux, macOS and Windows.
			</description>
		</method>
		<method name="get_power_state">
			<return type="int" enum="OS.PowerState">
			</return>
			<description>
				Returns the current state of the device regarding battery and power. See [enum PowerState] constants.
				[b]Note:[/b] This method is implemented on Linux, macOS and Windows.
=======
>>>>>>> 5d9cab3aeb3c62df6b7b44e6e68c0ebbb67f7a45
			</description>
		</method>
		<method name="get_process_id" qualifiers="const">
			<return type="int">
			</return>
			<description>
				Returns the project's process ID.
				[b]Note:[/b] This method is implemented on Android, iOS, Linux, macOS and Windows.
			</description>
		</method>
		<method name="get_processor_count" qualifiers="const">
			<return type="int">
			</return>
			<description>
				Returns the number of threads available on the host machine.
			</description>
		</method>
<<<<<<< HEAD
		<method name="get_real_window_size" qualifiers="const">
			<return type="Vector2">
			</return>
			<description>
				Returns the window size including decorations like window borders.
			</description>
		</method>
		<method name="get_scancode_string" qualifiers="const">
			<return type="String">
			</return>
			<argument index="0" name="code" type="int">
			</argument>
			<description>
				Returns the given scancode as a string (e.g. Return values: [code]"Escape"[/code], [code]"Shift+Escape"[/code]).
				See also [member InputEventKey.scancode] and [method InputEventKey.get_scancode_with_modifiers].
			</description>
		</method>
		<method name="get_screen_count" qualifiers="const">
			<return type="int">
			</return>
			<description>
				Returns the number of displays attached to the host machine.
			</description>
		</method>
		<method name="get_screen_dpi" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="screen" type="int" default="-1">
			</argument>
			<description>
				Returns the dots per inch density of the specified screen. If [code]screen[/code] is [/code]-1[/code] (the default value), the current screen will be used.
				[b]Note:[/b] On macOS, returned value is inaccurate if fractional display scaling mode is used.
				[b]Note:[/b] On Android devices, the actual screen densities are grouped into six generalized densities:
				[codeblock]
				   ldpi - 120 dpi
				   mdpi - 160 dpi
				   hdpi - 240 dpi
				  xhdpi - 320 dpi
				 xxhdpi - 480 dpi
				xxxhdpi - 640 dpi
				[/codeblock]
				[b]Note:[/b] This method is implemented on Android, Linux, macOS and Windows. Returns [code]72[/code] on unsupported platforms.
			</description>
		</method>
		<method name="get_screen_max_scale" qualifiers="const">
			<return type="float">
			</return>
			<description>
				Return the greatest scale factor of all screens.
				[b]Note:[/b] On macOS returned value is [code]2.0[/code] if there is at least one hiDPI (Retina) screen in the system, and [code]1.0[/code] in all other cases.
				[b]Note:[/b] This method is implemented on macOS.
			</description>
		</method>
		<method name="get_screen_position" qualifiers="const">
			<return type="Vector2">
			</return>
			<argument index="0" name="screen" type="int" default="-1">
			</argument>
			<description>
				Returns the position of the specified screen by index. If [code]screen[/code] is [/code]-1[/code] (the default value), the current screen will be used.
			</description>
		</method>
		<method name="get_screen_scale" qualifiers="const">
			<return type="float">
			</return>
			<argument index="0" name="screen" type="int" default="-1">
			</argument>
			<description>
				Return the scale factor of the specified screen by index. If [code]screen[/code] is [/code]-1[/code] (the default value), the current screen will be used.
				[b]Note:[/b] On macOS returned value is [code]2.0[/code] for hiDPI (Retina) screen, and [code]1.0[/code] for all other cases.
				[b]Note:[/b] This method is implemented on macOS.
			</description>
		</method>
		<method name="get_screen_size" qualifiers="const">
			<return type="Vector2">
			</return>
			<argument index="0" name="screen" type="int" default="-1">
			</argument>
			<description>
				Returns the dimensions in pixels of the specified screen. If [code]screen[/code] is [/code]-1[/code] (the default value), the current screen will be used.
			</description>
		</method>
		<method name="get_splash_tick_msec" qualifiers="const">
			<return type="int">
			</return>
			<description>
				Returns the amount of time in milliseconds it took for the boot logo to appear.
			</description>
		</method>
=======
>>>>>>> 5d9cab3aeb3c62df6b7b44e6e68c0ebbb67f7a45
		<method name="get_static_memory_peak_usage" qualifiers="const">
			<return type="int">
			</return>
			<description>
				Returns the maximum amount of static memory used (only works in debug).
			</description>
		</method>
		<method name="get_static_memory_usage" qualifiers="const">
			<return type="int">
			</return>
			<description>
				Returns the amount of static memory being used by the program in bytes.
			</description>
		</method>
		<method name="get_system_dir" qualifiers="const">
			<return type="String">
			</return>
			<argument index="0" name="dir" type="int" enum="OS.SystemDir">
			</argument>
			<description>
				Returns the actual path to commonly used folders across different platforms. Available locations are specified in [enum SystemDir].
				[b]Note:[/b] This method is implemented on Android, Linux, macOS and Windows.
			</description>
		</method>
		<method name="get_thread_caller_id" qualifiers="const">
			<return type="int">
			</return>
			<description>
				Returns the ID of the current thread. This can be used in logs to ease debugging of multi-threaded applications.
				[b]Note:[/b] Thread IDs are not deterministic and may be reused across application restarts.
			</description>
		</method>
		<method name="get_tablet_driver_count" qualifiers="const">
			<return type="int">
			</return>
			<description>
				Returns the total number of available tablet drivers.
				[b]Note:[/b] This method is implemented on Windows.
			</description>
		</method>
		<method name="get_tablet_driver_name" qualifiers="const">
			<return type="String">
			</return>
			<argument index="0" name="idx" type="int">
			</argument>
			<description>
				Returns the tablet driver name for the given index.
				[b]Note:[/b] This method is implemented on Windows.
			</description>
		</method>
		<method name="get_ticks_msec" qualifiers="const">
			<return type="int">
			</return>
			<description>
				Returns the amount of time passed in milliseconds since the engine started.
			</description>
		</method>
		<method name="get_ticks_usec" qualifiers="const">
			<return type="int">
			</return>
			<description>
				Returns the amount of time passed in microseconds since the engine started.
			</description>
		</method>
		<method name="get_time" qualifiers="const">
			<return type="Dictionary">
			</return>
			<argument index="0" name="utc" type="bool" default="false">
			</argument>
			<description>
				Returns current time as a dictionary of keys: hour, minute, second.
			</description>
		</method>
		<method name="get_time_zone_info" qualifiers="const">
			<return type="Dictionary">
			</return>
			<description>
				Returns the current time zone as a dictionary with the keys: bias and name.
			</description>
		</method>
		<method name="get_unique_id" qualifiers="const">
			<return type="String">
			</return>
			<description>
				Returns a string that is unique to the device.
				[b]Note:[/b] This string may change without notice if the user reinstalls/upgrades their operating system or changes their hardware. This means it should generally not be used to encrypt persistent data as the data saved prior to an unexpected ID change would become inaccessible. The returned string may also be falsified using external programs, so do not rely on the string returned by [method get_unique_id] for security purposes.
				[b]Note:[/b] Returns an empty string on HTML5 and UWP, as this method isn't implemented on those platforms yet.
			</description>
		</method>
		<method name="get_unix_time" qualifiers="const">
			<return type="float">
			</return>
			<description>
				Returns the current UNIX epoch timestamp in seconds.
				[b]Important:[/b] This is the system clock that the user can manually set. [b]Never use[/b] this method for precise time calculation since its results are also subject to automatic adjustments by the operating system. [b]Always use[/b] [method get_ticks_usec] or [method get_ticks_msec] for precise time calculation instead, since they are guaranteed to be monotonic (i.e. never decrease).
			</description>
		</method>
		<method name="get_unix_time_from_datetime" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="datetime" type="Dictionary">
			</argument>
			<description>
				Gets an epoch time value from a dictionary of time values.
				[code]datetime[/code] must be populated with the following keys: [code]year[/code], [code]month[/code], [code]day[/code], [code]hour[/code], [code]minute[/code], [code]second[/code].
				If the dictionary is empty [code]0[/code] is returned. If some keys are omitted, they default to the equivalent values for the UNIX epoch timestamp 0 (1970-01-01 at 00:00:00 UTC).
				You can pass the output from [method get_datetime_from_unix_time] directly into this function. Daylight Savings Time ([code]dst[/code]), if present, is ignored.
			</description>
		</method>
		<method name="get_user_data_dir" qualifiers="const">
			<return type="String">
			</return>
			<description>
				Returns the absolute directory path where user data is written ([code]user://[/code]).
				On Linux, this is [code]~/.local/share/godot/app_userdata/[project_name][/code], or [code]~/.local/share/[custom_name][/code] if [code]use_custom_user_dir[/code] is set.
				On macOS, this is [code]~/Library/Application Support/Godot/app_userdata/[project_name][/code], or [code]~/Library/Application Support/[custom_name][/code] if [code]use_custom_user_dir[/code] is set.
				On Windows, this is [code]%APPDATA%\Godot\app_userdata\[project_name][/code], or [code]%APPDATA%\[custom_name][/code] if [code]use_custom_user_dir[/code] is set. [code]%APPDATA%[/code] expands to [code]%USERPROFILE%\AppData\Roaming[/code].
				If the project name is empty, [code]user://[/code] falls back to [code]res://[/code].
			</description>
		</method>
		<method name="has_environment" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="variable" type="String">
			</argument>
			<description>
				Returns [code]true[/code] if the environment variable with the name [code]variable[/code] exists.
				[b]Note:[/b] Double-check the casing of [code]variable[/code]. Environment variable names are case-sensitive on all platforms except Windows.
			</description>
		</method>
		<method name="has_feature" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="tag_name" type="String">
			</argument>
			<description>
				Returns [code]true[/code] if the feature for the given feature tag is supported in the currently running instance, depending on platform, build etc. Can be used to check whether you're currently running a debug build, on a certain platform or arch, etc. Refer to the [url=https://docs.godotengine.org/en/3.2/getting_started/workflow/export/feature_tags.html]Feature Tags[/url] documentation for more details.
				[b]Note:[/b] Tag names are case-sensitive.
			</description>
		</method>
		<method name="is_debug_build" qualifiers="const">
			<return type="bool">
			</return>
			<description>
				Returns [code]true[/code] if the Godot binary used to run the project is a [i]debug[/i] export template, or when running in the editor.
				Returns [code]false[/code] if the Godot binary used to run the project is a [i]release[/i] export template.
				To check whether the Godot binary used to run the project is an export template (debug or release), use [code]OS.has_feature("standalone")[/code] instead.
			</description>
		</method>
		<method name="is_keycode_unicode" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="code" type="int">
			</argument>
			<description>
				Returns [code]true[/code] if the input keycode corresponds to a Unicode character.
			</description>
		</method>
		<method name="is_stdout_verbose" qualifiers="const">
			<return type="bool">
			</return>
			<description>
				Returns [code]true[/code] if the engine was executed with [code]-v[/code] (verbose stdout).
			</description>
		</method>
		<method name="is_userfs_persistent" qualifiers="const">
			<return type="bool">
			</return>
			<description>
				If [code]true[/code], the [code]user://[/code] file system is persistent, so that its state is the same after a player quits and starts the game again. Relevant to the HTML5 platform, where this persistence may be unavailable.
			</description>
		</method>
<<<<<<< HEAD
		<method name="is_window_always_on_top" qualifiers="const">
			<return type="bool">
			</return>
			<description>
				Returns [code]true[/code] if the window should always be on top of other windows.
			</description>
		</method>
		<method name="is_window_focused" qualifiers="const">
			<return type="bool">
			</return>
			<description>
				Returns [code]true[/code] if the window is currently focused.
				[b]Note:[/b] Only implemented on desktop platforms. On other platforms, it will always return [code]true[/code].
			</description>
		</method>
		<method name="keyboard_get_current_layout" qualifiers="const">
			<return type="int">
			</return>
			<description>
				Returns active keyboard layout index.
				[b]Note:[/b] This method is implemented on Linux, macOS and Windows.
			</description>
		</method>
		<method name="keyboard_get_layout_count" qualifiers="const">
			<return type="int">
			</return>
			<description>
				Returns the number of keyboard layouts.
				[b]Note:[/b] This method is implemented on Linux, macOS and Windows.
			</description>
		</method>
		<method name="keyboard_get_layout_language" qualifiers="const">
			<return type="String">
			</return>
			<argument index="0" name="index" type="int">
			</argument>
			<description>
				Returns the ISO-639/BCP-47 language code of the keyboard layout at position [code]index[/code].
				[b]Note:[/b] This method is implemented on Linux, macOS and Windows.
			</description>
		</method>
		<method name="keyboard_get_layout_name" qualifiers="const">
			<return type="String">
			</return>
			<argument index="0" name="index" type="int">
			</argument>
			<description>
				Returns the localized name of the keyboard layout at position [code]index[/code].
				[b]Note:[/b] This method is implemented on Linux, macOS and Windows.
			</description>
		</method>
		<method name="keyboard_set_current_layout">
			<return type="void">
			</return>
			<argument index="0" name="index" type="int">
			</argument>
			<description>
				Sets active keyboard layout.
				[b]Note:[/b] This method is implemented on Linux, macOS and Windows.
			</description>
		</method>
=======
>>>>>>> 5d9cab3aeb3c62df6b7b44e6e68c0ebbb67f7a45
		<method name="kill">
			<return type="int" enum="Error">
			</return>
			<argument index="0" name="pid" type="int">
			</argument>
			<description>
				Kill (terminate) the process identified by the given process ID ([code]pid[/code]), e.g. the one returned by [method execute] in non-blocking mode.
				[b]Note:[/b] This method can also be used to kill processes that were not spawned by the game.
				[b]Note:[/b] This method is implemented on Android, iOS, Linux, macOS and Windows.
			</description>
		</method>
		<method name="open_midi_inputs">
			<return type="void">
			</return>
			<description>
				Initialises the singleton for the system MIDI driver.
				[b]Note:[/b] This method is implemented on Linux, macOS and Windows.
			</description>
		</method>
		<method name="print_all_resources">
			<return type="void">
			</return>
			<argument index="0" name="tofile" type="String" default="&quot;&quot;">
			</argument>
			<description>
				Shows all resources in the game. Optionally, the list can be written to a file by specifying a file path in [code]tofile[/code].
			</description>
		</method>
		<method name="print_all_textures_by_size">
			<return type="void">
			</return>
			<description>
				Shows the list of loaded textures sorted by size in memory.
			</description>
		</method>
		<method name="print_resources_by_type">
			<return type="void">
			</return>
			<argument index="0" name="types" type="PackedStringArray">
			</argument>
			<description>
				Shows the number of resources loaded by the game of the given types.
			</description>
		</method>
		<method name="print_resources_in_use">
			<return type="void">
			</return>
			<argument index="0" name="short" type="bool" default="false">
			</argument>
			<description>
				Shows all resources currently used by the game.
			</description>
		</method>
		<method name="request_permission">
			<return type="bool">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<description>
				At the moment this function is only used by [code]AudioDriverOpenSL[/code] to request permission for [code]RECORD_AUDIO[/code] on Android.
			</description>
		</method>
		<method name="request_permissions">
			<return type="bool">
			</return>
			<description>
				With this function you can request dangerous permissions since normal permissions are automatically granted at install time in Android application.
				[b]Note:[/b] This method is implemented on Android.
			</description>
		</method>
		<method name="set_environment" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="variable" type="String">
			</argument>
			<argument index="1" name="value" type="String">
			</argument>
			<description>
				Sets the value of the environment variable [code]variable[/code] to [code]value[/code]. The environment variable will be set for the Godot process and any process executed with [method execute] after running [method set_environment]. The environment variable will [i]not[/i] persist to processes run after the Godot process was terminated.
				[b]Note:[/b] Double-check the casing of [code]variable[/code]. Environment variable names are case-sensitive on all platforms except Windows.
			</description>
		</method>
		<method name="set_thread_name">
			<return type="int" enum="Error">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<description>
				Sets the name of the current thread.
			</description>
		</method>
		<method name="set_use_file_access_save_and_swap">
			<return type="void">
			</return>
			<argument index="0" name="enabled" type="bool">
			</argument>
			<description>
				Enables backup saves if [code]enabled[/code] is [code]true[/code].
			</description>
		</method>
<<<<<<< HEAD
		<method name="set_window_always_on_top">
			<return type="void">
			</return>
			<argument index="0" name="enabled" type="bool">
			</argument>
			<description>
				Sets whether the window should always be on top.
				[b]Note:[/b] This method is implemented on Linux, macOS and Windows.
			</description>
		</method>
		<method name="set_window_mouse_passthrough">
			<return type="void">
			</return>
			<argument index="0" name="region" type="PoolVector2Array">
			</argument>
			<description>
				Sets a polygonal region of the window which accepts mouse events. Mouse events outside the region will be passed through.
				Passing an empty array will disable passthrough support (all mouse events will be intercepted by the window, which is the default behavior).
				[codeblock]
				# Set region, using Path2D node.
				OS.set_window_mouse_passthrough($Path2D.curve.get_baked_points())

				# Set region, using Polygon2D node.
				OS.set_window_mouse_passthrough($Polygon2D.polygon)

				# Reset region to default.
				OS.set_window_mouse_passthrough([])
				[/codeblock]
				[b]Note:[/b] On Windows, the portion of a window that lies outside the region is not drawn, while on Linux and macOS it is.
				[b]Note:[/b] This method is implemented on Linux, macOS and Windows.
			</description>
		</method>
		<method name="set_window_title">
			<return type="void">
			</return>
			<argument index="0" name="title" type="String">
			</argument>
			<description>
				Sets the window title to the specified string.
				[b]Note:[/b] This should be used sporadically. Don't set this every frame, as that will negatively affect performance on some window managers.
				[b]Note:[/b] This method is implemented on HTML5, Linux, macOS and Windows.
			</description>
		</method>
=======
>>>>>>> 5d9cab3aeb3c62df6b7b44e6e68c0ebbb67f7a45
		<method name="shell_open">
			<return type="int" enum="Error">
			</return>
			<argument index="0" name="uri" type="String">
			</argument>
			<description>
				Requests the OS to open a resource with the most appropriate program. For example:
				- [code]OS.shell_open("C:\\Users\name\Downloads")[/code] on Windows opens the file explorer at the user's Downloads folder.
				- [code]OS.shell_open("https://godotengine.org")[/code] opens the default web browser on the official Godot website.
				- [code]OS.shell_open("mailto:example@example.com")[/code] opens the default email client with the "To" field set to [code]example@example.com[/code]. See [url=https://blog.escapecreative.com/customizing-mailto-links/]Customizing [code]mailto:[/code] Links[/url] for a list of fields that can be added.
				Use [method ProjectSettings.globalize_path] to convert a [code]res://[/code] or [code]user://[/code] path into a system path for use with this method.
				[b]Note:[/b] This method is implemented on Android, iOS, HTML5, Linux, macOS and Windows.
			</description>
		</method>
<<<<<<< HEAD
		<method name="show_virtual_keyboard">
			<return type="void">
			</return>
			<argument index="0" name="existing_text" type="String" default="&quot;&quot;">
			</argument>
			<argument index="1" name="multiline" type="bool" default="false">
			</argument>
			<description>
				Shows the virtual keyboard if the platform has one.
				The [code]existing_text[/code] parameter is useful for implementing your own [LineEdit] or [TextEdit], as it tells the virtual keyboard what text has already been typed (the virtual keyboard uses it for auto-correct and predictions).
				The [code]multiline[/code] parameter needs to be set to [code]true[/code] to be able to enter multiple lines of text, as in [TextEdit].
				[b]Note:[/b] This method is implemented on Android, iOS and UWP.
			</description>
		</method>
=======
>>>>>>> 5d9cab3aeb3c62df6b7b44e6e68c0ebbb67f7a45
	</methods>
	<members>
		<member name="low_processor_usage_mode" type="bool" setter="set_low_processor_usage_mode" getter="is_in_low_processor_usage_mode" default="false">
			If [code]true[/code], the engine optimizes for low processor usage by only refreshing the screen if needed. Can improve battery consumption on mobile.
		</member>
		<member name="low_processor_usage_mode_sleep_usec" type="int" setter="set_low_processor_usage_mode_sleep_usec" getter="get_low_processor_usage_mode_sleep_usec" default="6900">
			The amount of sleeping between frames when the low-processor usage mode is enabled (in microseconds). Higher values will result in lower CPU usage.
		</member>
<<<<<<< HEAD
		<member name="max_window_size" type="Vector2" setter="set_max_window_size" getter="get_max_window_size" default="Vector2( 0, 0 )">
			The maximum size of the window (without counting window manager decorations). Does not affect fullscreen mode. Set to [code](0, 0)[/code] to reset to the system default value.
		</member>
		<member name="min_window_size" type="Vector2" setter="set_min_window_size" getter="get_min_window_size" default="Vector2( 0, 0 )">
			The minimum size of the window (without counting window manager decorations). Does not affect fullscreen mode. Set to [code](0, 0)[/code] to reset to the system default value.
		</member>
		<member name="screen_orientation" type="int" setter="set_screen_orientation" getter="get_screen_orientation" enum="_OS.ScreenOrientation" default="0">
			The current screen orientation.
		</member>
		<member name="tablet_driver" type="String" setter="set_current_tablet_driver" getter="get_current_tablet_driver" default="&quot;&quot;">
			The current tablet driver in use.
		</member>
		<member name="vsync_enabled" type="bool" setter="set_use_vsync" getter="is_vsync_enabled" default="true">
			If [code]true[/code], vertical synchronization (Vsync) is enabled.
		</member>
		<member name="vsync_via_compositor" type="bool" setter="set_vsync_via_compositor" getter="is_vsync_via_compositor_enabled" default="false">
			If [code]true[/code] and [code]vsync_enabled[/code] is true, the operating system's window compositor will be used for vsync when the compositor is enabled and the game is in windowed mode.
			[b]Note:[/b] This option is experimental and meant to alleviate stutter experienced by some users. However, some users have experienced a Vsync framerate halving (e.g. from 60 FPS to 30 FPS) when using it.
			[b]Note:[/b] This property is only implemented on Windows.
		</member>
		<member name="window_borderless" type="bool" setter="set_borderless_window" getter="get_borderless_window" default="false">
			If [code]true[/code], removes the window frame.
			[b]Note:[/b] Setting [code]window_borderless[/code] to [code]false[/code] disables per-pixel transparency.
		</member>
		<member name="window_fullscreen" type="bool" setter="set_window_fullscreen" getter="is_window_fullscreen" default="false">
			If [code]true[/code], the window is fullscreen.
		</member>
		<member name="window_maximized" type="bool" setter="set_window_maximized" getter="is_window_maximized" default="false">
			If [code]true[/code], the window is maximized.
		</member>
		<member name="window_minimized" type="bool" setter="set_window_minimized" getter="is_window_minimized" default="false">
			If [code]true[/code], the window is minimized.
		</member>
		<member name="window_per_pixel_transparency_enabled" type="bool" setter="set_window_per_pixel_transparency_enabled" getter="get_window_per_pixel_transparency_enabled" default="false">
			If [code]true[/code], the window background is transparent and window frame is removed.
			Use [code]get_tree().get_root().set_transparent_background(true)[/code] to disable main viewport background rendering.
			[b]Note:[/b] This property has no effect if [b]Project &gt; Project Settings &gt; Display &gt; Window &gt; Per-pixel transparency &gt; Allowed[/b] setting is disabled.
			[b]Note:[/b] This property is implemented on HTML5, Linux, macOS and Windows.
		</member>
		<member name="window_position" type="Vector2" setter="set_window_position" getter="get_window_position" default="Vector2( 0, 0 )">
			The window position relative to the screen, the origin is the top left corner, +Y axis goes to the bottom and +X axis goes to the right.
		</member>
		<member name="window_resizable" type="bool" setter="set_window_resizable" getter="is_window_resizable" default="true">
			If [code]true[/code], the window is resizable by the user.
		</member>
		<member name="window_size" type="Vector2" setter="set_window_size" getter="get_window_size" default="Vector2( 0, 0 )">
			The size of the window (without counting window manager decorations).
		</member>
=======
>>>>>>> 5d9cab3aeb3c62df6b7b44e6e68c0ebbb67f7a45
	</members>
	<constants>
		<constant name="VIDEO_DRIVER_GLES2" value="0" enum="VideoDriver">
			The GLES2 rendering backend. It uses OpenGL ES 2.0 on mobile devices, OpenGL 2.1 on desktop platforms and WebGL 1.0 on the web.
		</constant>
		<constant name="VIDEO_DRIVER_VULKAN" value="1" enum="VideoDriver">
			The Vulkan rendering backend.
		</constant>
		<constant name="DAY_SUNDAY" value="0" enum="Weekday">
			Sunday.
		</constant>
		<constant name="DAY_MONDAY" value="1" enum="Weekday">
			Monday.
		</constant>
		<constant name="DAY_TUESDAY" value="2" enum="Weekday">
			Tuesday.
		</constant>
		<constant name="DAY_WEDNESDAY" value="3" enum="Weekday">
			Wednesday.
		</constant>
		<constant name="DAY_THURSDAY" value="4" enum="Weekday">
			Thursday.
		</constant>
		<constant name="DAY_FRIDAY" value="5" enum="Weekday">
			Friday.
		</constant>
		<constant name="DAY_SATURDAY" value="6" enum="Weekday">
			Saturday.
		</constant>
		<constant name="MONTH_JANUARY" value="1" enum="Month">
			January.
		</constant>
		<constant name="MONTH_FEBRUARY" value="2" enum="Month">
			February.
		</constant>
		<constant name="MONTH_MARCH" value="3" enum="Month">
			March.
		</constant>
		<constant name="MONTH_APRIL" value="4" enum="Month">
			April.
		</constant>
		<constant name="MONTH_MAY" value="5" enum="Month">
			May.
		</constant>
		<constant name="MONTH_JUNE" value="6" enum="Month">
			June.
		</constant>
		<constant name="MONTH_JULY" value="7" enum="Month">
			July.
		</constant>
		<constant name="MONTH_AUGUST" value="8" enum="Month">
			August.
		</constant>
		<constant name="MONTH_SEPTEMBER" value="9" enum="Month">
			September.
		</constant>
		<constant name="MONTH_OCTOBER" value="10" enum="Month">
			October.
		</constant>
		<constant name="MONTH_NOVEMBER" value="11" enum="Month">
			November.
		</constant>
		<constant name="MONTH_DECEMBER" value="12" enum="Month">
			December.
		</constant>
<<<<<<< HEAD
		<constant name="APPLICATION_HANDLE" value="0" enum="HandleType">
			Application handle:
			- Windows: [code]HINSTANCE[/code] of the application
			- MacOS: [code]NSApplication*[/code] of the application (not yet implemented)
			- Android: [code]JNIEnv*[/code] of the application (not yet implemented)
		</constant>
		<constant name="DISPLAY_HANDLE" value="1" enum="HandleType">
			Display handle:
			- Linux: [code]X11::Display*[/code] for the display
		</constant>
		<constant name="WINDOW_HANDLE" value="2" enum="HandleType">
			Window handle:
			- Windows: [code]HWND[/code] of the main window
			- Linux: [code]X11::Window*[/code] of the main window
			- MacOS: [code]NSWindow*[/code] of the main window (not yet implemented)
			- Android: [code]jObject[/code] the main android activity (not yet implemented)
		</constant>
		<constant name="WINDOW_VIEW" value="3" enum="HandleType">
			Window view:
			- Windows: [code]HDC[/code] of the main window drawing context
			- MacOS: [code]NSView*[/code] of the main windows view (not yet implemented)
		</constant>
		<constant name="OPENGL_CONTEXT" value="4" enum="HandleType">
			OpenGL Context:
			- Windows: [code]HGLRC[/code]
			- Linux: [code]X11::GLXContext[/code]
			- MacOS: [code]NSOpenGLContext*[/code] (not yet implemented)
		</constant>
		<constant name="SCREEN_ORIENTATION_LANDSCAPE" value="0" enum="ScreenOrientation">
			Landscape screen orientation.
		</constant>
		<constant name="SCREEN_ORIENTATION_PORTRAIT" value="1" enum="ScreenOrientation">
			Portrait screen orientation.
		</constant>
		<constant name="SCREEN_ORIENTATION_REVERSE_LANDSCAPE" value="2" enum="ScreenOrientation">
			Reverse landscape screen orientation.
		</constant>
		<constant name="SCREEN_ORIENTATION_REVERSE_PORTRAIT" value="3" enum="ScreenOrientation">
			Reverse portrait screen orientation.
		</constant>
		<constant name="SCREEN_ORIENTATION_SENSOR_LANDSCAPE" value="4" enum="ScreenOrientation">
			Uses landscape or reverse landscape based on the hardware sensor.
		</constant>
		<constant name="SCREEN_ORIENTATION_SENSOR_PORTRAIT" value="5" enum="ScreenOrientation">
			Uses portrait or reverse portrait based on the hardware sensor.
		</constant>
		<constant name="SCREEN_ORIENTATION_SENSOR" value="6" enum="ScreenOrientation">
			Uses most suitable orientation based on the hardware sensor.
		</constant>
=======
>>>>>>> 5d9cab3aeb3c62df6b7b44e6e68c0ebbb67f7a45
		<constant name="SYSTEM_DIR_DESKTOP" value="0" enum="SystemDir">
			Desktop directory path.
		</constant>
		<constant name="SYSTEM_DIR_DCIM" value="1" enum="SystemDir">
			DCIM (Digital Camera Images) directory path.
		</constant>
		<constant name="SYSTEM_DIR_DOCUMENTS" value="2" enum="SystemDir">
			Documents directory path.
		</constant>
		<constant name="SYSTEM_DIR_DOWNLOADS" value="3" enum="SystemDir">
			Downloads directory path.
		</constant>
		<constant name="SYSTEM_DIR_MOVIES" value="4" enum="SystemDir">
			Movies directory path.
		</constant>
		<constant name="SYSTEM_DIR_MUSIC" value="5" enum="SystemDir">
			Music directory path.
		</constant>
		<constant name="SYSTEM_DIR_PICTURES" value="6" enum="SystemDir">
			Pictures directory path.
		</constant>
		<constant name="SYSTEM_DIR_RINGTONES" value="7" enum="SystemDir">
			Ringtones directory path.
		</constant>
	</constants>
</class>
